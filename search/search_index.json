{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the JustLend DAO Documentation!","text":"<p>JustLend DAO is the first decentralized lending protocol on the TRON network, dedicated to providing users with an efficient, secure, and open digital asset lending marketplace. The source code of JustLend DAO is available on GitHub. This article offers a comprehensive overview of JustLend DAO, guiding you through how to use the platform and covering the following key areas.</p> <ul> <li>GETTING STARTED</li> <li>GOVERNANCE</li> <li>DEVELOPERS</li> <li>RESOURCES</li> </ul> <p>For more information about JustLend DAO and related topics, please visit the official website at justlend.org or explore the additional resources linked below:</p> <ul> <li>JustLend DAO Whitepaper</li> <li>JustLend DAO Developer Hub</li> </ul>"},{"location":"developers/apis/","title":"APIs","text":""},{"location":"developers/contracts_overview/","title":"Contracts Overview","text":"<p>JustLend DAO Protocol contracts are divided in these repositories:</p> <ul> <li>Supply and Borrow Market: contains core contracts for JustLend DAO, including logic for supply and borrow market (SBM), interest rate model, governance, price oracle and comptroller.</li> <li>SBM: enables supplying of crypto assets as collateral in order to borrow the base asset. Accounts can also earn interest by supplying the base asset to the protocol.</li> <li>Interest Rate Model: users with a positive balance of the base asset earn interest, denominated in the base asset, based on a supply rate model.</li> <li>Price-Oracle: contains the price oracle contracts we support, along with the logic validation for prices returned by these oracles.</li> <li>Governance: contracts used for proposing, voting and executing proposals.</li> <li>Comptroller: the risk management layer of the protocol. It determines how much collateral a user is required to maintain, and whether user can be liquidated.</li> <li>Staked TRX: the contracts utilized for staking TRX to earn high rewards.</li> <li>Energy Rental: contracts enable users to rent energy anytime with a low price.</li> </ul>"},{"location":"developers/contracts_overview/#core-contracts","title":"Core Contracts","text":"<p>There are 5 categories of core repository contracts:</p> <ul> <li>JTokens Contract</li> <li>Interest Rate Model Contract</li> <li>Price Oracle Contract</li> <li>Governance Contract</li> <li>Comptroller Contract</li> </ul>"},{"location":"developers/contracts_overview/#jtokens-contract","title":"JTokens Contract","text":"<p><code>JToken:</code> the contract used to support all assets by JustLend DAO, such as the jTRX, jUSDT, jSUN and jBTC you receive after supplying the corresponding assets.</p>"},{"location":"developers/contracts_overview/#interest-rate-model-contract","title":"Interest Rate Model Contract","text":"<p><code>WhitePaperInterestRateModel:</code> the contract used to set up a straightforward interest rate model, which the borrowing rate is directly proportional to the utilization.</p> <p><code>JumpRateModelV2:</code> the Contract used to set up a complex interest rate model, which the interest rate jumps to a higher tier when the utilization rate exceeds u optimal.</p>"},{"location":"developers/contracts_overview/#price-oracle-contract","title":"Price Oracle Contract","text":"<p><code>Price Oracle:</code> the JustLend Protocol use WinkLink's price service to fetch the token price. The PriceOracle contract is responsible for setting and display token prices.</p>"},{"location":"developers/contracts_overview/#governance-contract","title":"Governance Contract","text":"<p><code>GovernorBravo:</code> The main JustLend Governance Contract. Users interact with it to: - Submit new proposal - Vote on a proposal - Cancel a proposal - Queue a proposal for execution with a time lock executor contract</p> <p><code>Timelock:</code> the contract used to execute or cancel a queued transaction.</p>"},{"location":"developers/contracts_overview/#comptroller-contract","title":"Comptroller Contract","text":"<p><code>Comptroller:</code> the Comptroller contract is the central contract for each lending pool. It contains functionality central to borrowing activity in the pool like supplying and borrowing assets and liquidations.</p>"},{"location":"developers/contracts_overview/#staked-trx-contracts","title":"Staked TRX Contracts","text":"<p><code>Staked TRX(sTRX):</code> the contract utilized for staking TRX to earn high rewards.</p>"},{"location":"developers/contracts_overview/#energy-rental","title":"Energy Rental","text":"<p><code>Energy Rental:</code> contracts enable users to rent energy anytime with a low price.</p>"},{"location":"developers/deployed_contracts/","title":"Deployed Contracts","text":""},{"location":"developers/deployed_contracts/#supply-and-borrow-market","title":"Supply and Borrow Market","text":"<ul> <li> <p>JToken</p> </li> <li> <p>InterestRateModel</p> </li> <li> <p>Price Oracle</p> </li> <li> <p>Governance</p> </li> <li> <p>Comptroller</p> </li> </ul>"},{"location":"developers/deployed_contracts/#staked-trx","title":"Staked TRX","text":""},{"location":"developers/deployed_contracts/#energy-rental","title":"Energy Rental","text":""},{"location":"developers/energy_rental/","title":"Energy Rental","text":"<p>All transactions on JustLend DAO require Energy, which can only be acquired through staking or burning TRX. This process involves high costs and lengthy procedures. In response, JustLend DAO introduces the Energy Rental service, allowing users to rent Energy at a significantly reduced price compared to staking or burning TRX. The contract EnergyRental used to set up the Energy Rental service.</p>"},{"location":"developers/energy_rental/#prepay-refund","title":"PrePay &amp; Refund","text":""},{"location":"developers/energy_rental/#query-interface","title":"Query Interface","text":""},{"location":"developers/energy_rental/#write-interface","title":"Write Interface","text":""},{"location":"developers/staked_trx/","title":"Staked TRX","text":"<p>Based on Stake 2.0, with TRX Liquid Staking, users can stake TRX to get sTRX tokens and gain high rewards. Compared to traditional staking, TRX Liquid Staking is easier to use and more profitable. Staked TRX will be used automatically for voting and governance, and gain rewards via Energy Rental. The contract StakedTRX used to set up the staked TRX service.</p>"},{"location":"developers/staked_trx/#query-interface","title":"Query Interface","text":""},{"location":"developers/staked_trx/#write-interface","title":"Write Interface","text":""},{"location":"developers/supply_and_borrow_market/comptroller/","title":"Comptroller","text":"<p>The Comptroller is the risk management module of the JustLend DAO protocol. It determines how much collateral should users keep to avoid liquidation. The Comptroller is implemented as an upgradable contract. The entrance is Unitroller; the implementation is Comptroller.</p> <p><code>Comptroller.sol:</code> allows users to:</p> <ul> <li>Markets</li> <li>Get Assets In</li> <li>Get Account Liquidation</li> <li>Liquidation Incentive</li> </ul> <p>The source code is available on Github.</p>"},{"location":"developers/supply_and_borrow_market/comptroller/#markets","title":"Markets","text":""},{"location":"developers/supply_and_borrow_market/comptroller/#enter-markets","title":"Enter Markets","text":"<p>Calling this method enters a list of markets to supply or borrow. <pre><code>function enterMarkets(address[] memory cTokens) public returns (uint[] memory)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>cTokens:</code> address list of the markets to enter.</li> </ul> </li> <li>Returns: for each market, returns 0 for success, otherwise an error code.</li> </ul>"},{"location":"developers/supply_and_borrow_market/comptroller/#exit-market","title":"Exit Market","text":"<p>Calling this method exits a currently entered market. <pre><code>function exitMarket(address cTokenAddress) external returns (uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>cTokenAddress:</code> market address to quit.</li> </ul> </li> <li>Returns: 0 on success, otherwise an error code.</li> </ul>"},{"location":"developers/supply_and_borrow_market/comptroller/#get-assets-in","title":"Get Assets In","text":"<p>Calling this method returns a list of already entered markets. <pre><code>function getAssetsIn(address account) external view returns (CToken[] memory)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>account:</code> the markets this account enters will be returned.</li> </ul> </li> <li>Returns: markets have been entered by the specified address.</li> </ul>"},{"location":"developers/supply_and_borrow_market/comptroller/#markets_1","title":"Markets","text":"<p>Calling this method returns the status of a market(isListed, collateralFactorMantissa, comped) <pre><code>function markets(address cTokenAddress) view returns (bool, uint, bool)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>cTokenAddress:</code> market address.</li> </ul> </li> <li>Returns:<ul> <li><code>isListed:</code> whether recognized by comptroller;</li> <li><code>collateralFactorMantissa:</code> the value can be borrowed(scaled by 1e18);</li> <li><code>comped:</code> whether suppliers &amp; borrowers can get jst dividends.</li> </ul> </li> </ul>"},{"location":"developers/supply_and_borrow_market/comptroller/#collateral-liquidation","title":"Collateral &amp; Liquidation","text":""},{"location":"developers/supply_and_borrow_market/comptroller/#get-account-liquidity","title":"Get Account Liquidity","text":"<p>Calling this method returns the liquidity and shortfall of a user. <pre><code>function getAccountLiquidity(address account) public view returns (uint, uint, uint)\n</code></pre></p> <ul> <li>Parameter description:</li> <li><code>account:</code> address to be queried.</li> <li>Returns:</li> <li><code>error:</code> 0 for success, otherwise an error code;</li> <li><code>liquidity:</code> current liquidity;</li> <li><code>shortfall:</code> the shortfall value of the account's collateral requirement.</li> </ul>"},{"location":"developers/supply_and_borrow_market/comptroller/#close-factor-mantissa","title":"Close Factor Mantissa","text":"<p>Calling this method gets the percentage of a liquidatable account should repay in a single liquidation. The range is 0%-100%. The calculation result of this method applies to a single asset. <pre><code>function closeFactorMantissa() view returns (uint256)\n</code></pre></p> <ul> <li>Parameter description: N/A.</li> <li>Returns: The close factor, scaled by 1e18.</li> </ul>"},{"location":"developers/supply_and_borrow_market/comptroller/#liquidation-incentive-mantissa","title":"Liquidation Incentive Mantissa","text":"<p>Calling this method gets liquidators' incentives. The incentive is for underwater accounts. Part of this will be given to jToken reserves according to the seize share. <pre><code>function liquidationIncentiveMantissa() view returns (uint256)\n</code></pre></p> <ul> <li>Parameter description: N/A.</li> <li>Returns: The close factor, scaled by 1e18.</li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/","title":"Governance","text":"<p>JustLend DAO protocol is governed and upgraded by JST holders. There are three components included in the governance system: JST(WJST) token, governance module(GovernorBravo) and Timelock. The governance of the JustLend DAO protocol is through proposals, whose process can be summarized as proposal posting-voting-taking effect.</p> <p><code>GovernorBravoDelegate.sol:</code> allows users to:</p> <ul> <li>Propose</li> <li>Queue</li> <li>Execute</li> <li>Cancel</li> <li>Deposit</li> <li>Vote</li> </ul> <p>The source code is available on Github.</p>"},{"location":"developers/supply_and_borrow_market/governance/#proposals","title":"Proposals","text":""},{"location":"developers/supply_and_borrow_market/governance/#propose","title":"Propose","text":"<p>Calling this method creates a proposal to change &amp; update the JustLend DAO protocol. <pre><code>function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) public returns (uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>targets:</code> target addresses for calls to be made during proposal execution;</li> <li><code>values:</code> values to be passed to the calls;</li> <li><code>signatures:</code> function signatures;</li> <li><code>calldatas:</code> data for each function;</li> <li><code>description:</code> a readable message of what exactly the proposal changes.</li> </ul> </li> <li>Returns: the ID of this proposal.</li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/#queue","title":"Queue","text":"<p>Calling this method moves a successful proposal into the Timelock waiting period. The waiting period begins when this method is successfully called. <pre><code>function queue(uint proposalId) public\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>proposalId:</code> ID of the successful proposal.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/#execute","title":"Execute","text":"<p>Calling this method executes the proposal whose waiting period has already been ended. Actions in the proposal will be invoked during the execution. <pre><code>function execute(uint proposalId) public payable\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>proposalId:</code> ID of the proposal to be executed.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/#cancel","title":"Cancel","text":"<p>Calling this function cancels a proposal. A proposal can be cancelled at any time prior to its execution. <pre><code>function cancel(uint proposalId) public\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>proposalId:</code> ID of the proposal to be cancelled.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/#get-actions","title":"Get Actions","text":"<p>Calling this method gets the actions of an exact proposal. <pre><code>function getActions(uint proposalId) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>proposalId:</code> ID of the proposal.</li> </ul> </li> <li>Returns:<ul> <li><code>targets:</code> target addresses for calls to be made during proposal execution;</li> <li><code>values:</code> values to be passed to the calls;</li> <li><code>signatures:</code> function signatures;</li> <li><code>calldatas:</code> data for each function.</li> </ul> </li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/#get-receipt","title":"Get Receipt","text":"<p>Calling this method gets the votes of a specified voter on a proposal. <pre><code>function getReceipt(uint proposalId, address voter) public view returns (Receipt memory)\n\nstruct Receipt {\n    bool hasVoted;\n    bool support;\n    uint256 votes;\n}}\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>proposalId:</code> ID of the proposal.</li> <li><code>voter:</code> address of the specified account.</li> </ul> </li> <li>Returns:<ul> <li><code>hasVoted:</code> voted or not;</li> <li><code>values:</code> for or against;</li> <li><code>signatures:</code> vote count.</li> </ul> </li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/#proposal-state","title":"Proposal State","text":"<p>Calling this method returns the state of a specified proposal. <pre><code>function state(uint proposalId) public view returns (ProposalState)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>proposalId:</code> ID of the specified proposal;</li> </ul> </li> <li>Returns:<ul> <li><code>ProposalState:</code> Pending or Active or Canceled; Defeated or Succeeded or Queued; Expired or Executed.</li> </ul> </li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/#poll-vote","title":"Poll &amp; Vote","text":""},{"location":"developers/supply_and_borrow_market/governance/#deposit","title":"Deposit","text":"<p>Calling this method exchanges JST for WJST at a one-to-one ratio. <pre><code>function deposit(uint256 sad) public\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>sad:</code> number of votes(WJST) to exchange.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/#cast-vote","title":"Cast Vote","text":"<p>Calling this method casts a vote on a proposal. The voting weight will be calculated at the time the proposal's state becomes active. <pre><code>function castVote(uint proposalId, uint votes, bool support) public\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>proposalId:</code> ID of the proposal to vote;</li> <li><code>votes:</code> number of the votes to be cast;</li> <li><code>support:</code> for or against.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/#cast-vote-with-reason","title":"Cast Vote With Reason","text":"<p>Calling this method casts a vote on a proposal. The reason can be submitted simultaneously. <pre><code>function castVoteWithReason(uint proposalId, uint votes, bool support, string calldata reson) public\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>proposalId:</code> ID of the proposal to vote;</li> <li><code>vote:</code> number of the votes to be cast;</li> <li><code>support:</code> for or against;</li> <li><code>reason:</code> voting reason.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/governance/#cast-vote-by-signature","title":"Cast Vote By Signature","text":"<p>Calling this method casts votes on a specified proposal. Comparing with <code>castVote()</code>, this method allows offline signature. <pre><code>function castVoteWithReason(uint proposalId, uint votes, bool support, string calldata reson) public\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>proposalId:</code> ID of the proposal to vote;</li> <li><code>vote:</code> number of the votes to be cast;</li> <li><code>support:</code> for or against;</li> <li><code>v:</code> recover byte of the signature;</li> <li><code>r:</code> half of the ECDSA signature pair;</li> <li><code>s:</code> half of the ECDSA signature pair.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/interest_rate_model/","title":"Interest Rate Model","text":"<p>JustLend DAO's interest rate model aims to maximize the utilization of assets while effectively managing liquidity risks. Therefore, the parameter utilization rate U of each market is particularly important, as it reflects the true situation of the available assets in each market. As the utilization rate approaches 100%, assets become scarce, making borrowing impossible.  Meanwhile, suppliers may be unable to withdraw their liquidity due to the lack of available assets. The formula of the utilization U is defined as:</p>      U = Total Borrows / Total Supply  <p>To calibrate the interest rate model around an optimal utilization rate which reflects the real conditions, JustLend DAO provides variable interest rates for markets through two distinct interest models:</p> <ul> <li><code>WhitePaperInterestRateModel:</code> a simple interest rate model where the borrowing rate is directly tied to the utilization rate;</li> <li><code>JumpRateModelV2::</code> operates differently, as the interest rate jumps to a higher tier when the utilization rate surpasses a certain threshold.</li> </ul>"},{"location":"developers/supply_and_borrow_market/interest_rate_model/#whitepaper-rate-model","title":"Whitepaper Rate Model","text":"<p>The Whitepaper Rate Model is straightforward, as the borrowing rate is directly proportional to the utilization. The interest rate is defined as below.</p>"},{"location":"developers/supply_and_borrow_market/interest_rate_model/#borrow-rate","title":"Borrow Rate:","text":"borrow_rate(u) = a \u2217 u + b  <p>where the borrow utilization rate <code>u</code> is defined as:</p>      u = borrows / (cash + borrows \u2212 reserves)  <ul> <li><code>borrows:</code> the total amount borrowed in the market, denominated in the underlying asset, excluding bad debts;</li> <li><code>cash:</code> the total amount of the underlying asset held by the market at a specific time;</li> <li><code>reserves:</code> the amount of the underlying asset held by the market that is not accessible to borrowers or suppliers, as it is reserved for purposes outlined in the protocol's tokenomics.</li> </ul>"},{"location":"developers/supply_and_borrow_market/interest_rate_model/#supply-rate","title":"Supply Rate:","text":"supply_rate(u) = borrow_rate(u) \u2217 u \u2217 (1 \u2212 reserve_factor)"},{"location":"developers/supply_and_borrow_market/interest_rate_model/#model-parameters","title":"Model Parameters","text":"<ul> <li><code>a:</code> variable interest rate slope;</li> <li><code>b:</code> base rate per block (baseRatePerYear / blocksPerYear);</li> <li><code>reserve_factor:</code> portion of interest income extracted from the protocol.</li> </ul>"},{"location":"developers/supply_and_borrow_market/interest_rate_model/#jump-rate-model","title":"Jump Rate Model","text":"<p>The Jump Rate Model is quite different with the Whitepaper Rate Model, where the interest rate jumps to a higher tier when the utilization rate exceeds U_optional The interest rate is defined as below.</p>"},{"location":"developers/supply_and_borrow_market/interest_rate_model/#borrow-rate_1","title":"Borrow Rate:","text":"<p>if u &lt; kink:</p>      supply_rate(u) = a_1 * u + b  <p>if u &gt;= kink:</p>      supply_rate(u) = a_1 * kink + a_2 * (u - kink) + b  <p>where the borrow utilization rate <code>u</code> is defined as:</p>      u = borrows / (cash + borrows \u2212 reserves)  <ul> <li><code>borrows:</code> the total amount borrowed in the market, denominated in the underlying asset, excluding bad debts.</li> <li><code>cash:</code> the total amount of the underlying asset held by the market at a specific time.</li> <li><code>reserves:</code> the amount of the underlying asset held by the market that is not accessible to borrowers or suppliers, as it is reserved for purposes outlined in the protocol's tokenomics.</li> </ul>"},{"location":"developers/supply_and_borrow_market/interest_rate_model/#supply-rate_1","title":"Supply Rate:","text":"supply_rate(u) = borrow_rate(u) \u2217 u \u2217 (1 \u2212 reserve_factor)"},{"location":"developers/supply_and_borrow_market/interest_rate_model/#model-parameters_1","title":"Model Parameters","text":"<ul> <li><code>a_1:</code> variable interest rate slope1;</li> <li><code>a_2:</code> variable interest rate slope2;</li> <li><code>b:</code> base rate per block (baseRatePerYear / blocksPerYear);</li> <li><code>kink:</code> the utilization point at which the jump multiplier is applied, and the variable interest rate slope shifts from slope1 to slope2;</li> <li><code>reserve_factor:</code> portion of interest income extracted from the protocol.</li> </ul>"},{"location":"developers/supply_and_borrow_market/price_oracle/","title":"Price Oracle","text":"<p>Blockchain-powered smart contracts, by their inherent design, cannot directly access information from external systems. To bridge this critical gap and ensure the integrity of financial operations, the JustLend DAO protocol relies on robust and decentralized price feeds. We use Chainlink Data Feeds as our primary Oracles to secure various markets. JustLend DAO protocol uses a PriceOracle contract to set and display token prices in sun(10^-6 TRX), scaled by 10^(tokenDecimal - 6). Prices of the underlying tokens are posted every 30 minutes via <code>setPrice()</code> by a specified poster.</p> <p><code>SimplePriceOracle.sol:</code> allows users to:</p> <ul> <li>Price Poster</li> <li>Get Asset Price</li> <li>Set Price</li> </ul> <p>The source code is available on Github.</p>"},{"location":"developers/supply_and_borrow_market/price_oracle/#contracts-abi","title":"Contracts ABI","text":""},{"location":"developers/supply_and_borrow_market/price_oracle/#anchor-token-price","title":"Anchor Token Price","text":"<p>Calling this methods returns the current price anchor of a specified token. <pre><code>function anchors(address) view returns(uint256, uint256)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>token:</code> the address of the underlying token(e.g. TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t for USDT).</li> </ul> </li> <li>Returns:<ul> <li><code>period:</code> the current time period. Calculated as: current block height/ 600 (the TRON network produces approx. 600 blocks per 30 mins);</li> <li><code>priceMantissa:</code> token prices in sun(10^-6 TRX), scaled by 10^(tokenDecimal - 6).</li> </ul> </li> </ul>"},{"location":"developers/supply_and_borrow_market/price_oracle/#price-poster","title":"Price Poster","text":"<p>Calling this methods returns the current price poster. <pre><code>function poster() view returns(address)\n</code></pre></p> <ul> <li>Parameter description: N/A.</li> <li>Returns: Address of the current poster.</li> </ul>"},{"location":"developers/supply_and_borrow_market/price_oracle/#asset-prices","title":"Asset Prices","text":"<p>Calling this method returns the current price of the specified asset. <pre><code>function assetPrices(address asset) public view returns (uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>asset:</code> the address of the token to query.</li> </ul> </li> <li>Returns: the current price of the token in sun(10^-6 TRX), scaled by 10^(tokenDecimal - 6).</li> </ul>"},{"location":"developers/supply_and_borrow_market/price_oracle/#get-price","title":"Get Price","text":"<p>Calling this method returns the current price of the specified asset. <pre><code>function getPrice(address asset) public view returns (uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>asset:</code> the address of the token to query.</li> </ul> </li> <li>Returns: the current price of the token in sun(10^-6 TRX), scaled by 10^(tokenDecimal - 6).</li> </ul>"},{"location":"developers/supply_and_borrow_market/price_oracle/#set-price-poster-only","title":"Set Price (poster-only)","text":"<p>Calling this methods set a token price for the current time period. <pre><code>function setPrice(address asset, uint requestedPriceMantissa) public returns (uint)\n</code></pre></p> <ul> <li>Parameter description:</li> <li><code>asset:</code> the address of the underlying token (e.g. TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t for USDT);</li> <li><code>requestedPriceMantissa:</code> new price, scaled by 10^27.</li> <li>Returns: 0 for success, otherwise an error code.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/","title":"SBM","text":"<p>The JustLend DAO Supply and Borrow Market (SBM) is a decentralized  liquidity pool where users can participate as suppliers, borrowers or liquidators. Suppliers provide liquidity to a market and can earn interest on the assets provided, where borrowers are able to borrow in a collateralize assets way.</p> <p>The SBM contract is the main user-facing contract. Most user interactions with the JustLend DAO Protocol occur via the Ctoken contract. It exposes the liquidity management methods that can be invoked using either Solidity or Web3 libraries.</p> <p><code>Ctoken.sol:</code> allows users to:</p> <ul> <li>Supply</li> <li>Borrow</li> <li>Withdraw</li> <li>Reapy</li> <li>Liquidation</li> </ul> <p>The source code is available on Github.</p>"},{"location":"developers/supply_and_borrow_market/sbm/#query-interface","title":"Query Interface","text":""},{"location":"developers/supply_and_borrow_market/sbm/#exchangerate","title":"ExchangeRate","text":"<p>Calling this method accrues interest and returns the up-to-date exchange rate. <pre><code>function exchangeRateCurrent() public nonReentrant returns (uint)\n</code></pre></p> <ul> <li>Parameter description: N/A</li> <li>Returns: calculated exchange rate scaled by 1e18.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#get-cash","title":"Get Cash","text":"<p>Calling this method gets the total amount of underlying balance currently available to this market. <pre><code>function getCash() public view returns (uint)\n</code></pre></p> <ul> <li>Parameter description: N/A</li> <li>Returns: The quantity of underlying assets owned by this contract.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#total-borrows","title":"Total Borrows","text":"<p>Calling this method gets the sum of the currently loaned-outs and the accrued interests. <pre><code>function totalBorrowsCurrent() external nonReentrant returns (uint)\n</code></pre></p> <ul> <li>Parameter description: N/A</li> <li>Returns: The total borrows with interest.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#borrow-balance","title":"Borrow Balance","text":"<p>Calling this method accrues interest to the updated borrowIndex and then calculates the account's borrow balance using the updated borrowIndex. <pre><code>function borrowBalanceCurrent(address account) external nonReentrant returns (uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>account:</code> the address whose balance should be calculated after updating borrowIndex.</li> </ul> </li> <li>Returns: The total borrows with interest.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#borrow-rate","title":"Borrow Rate","text":"<p>Calling this method gets the current per-block borrow interest rate for this jToken. <pre><code>function borrowRatePerBlock() external view returns (uint)\n</code></pre></p> <ul> <li>Parameter description: N/A</li> <li>Returns: The borrow interest rate per block, scaled by 1e18.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#total-supply","title":"Total Supply","text":"<p>Calling this method gets the total number of tokens in circulation. <pre><code>function totalSupply() external view returns (uint256)\n</code></pre></p> <ul> <li>Parameter description: N/A</li> <li>Returns: The supply of tokens.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#underlying-balance","title":"Underlying Balance","text":"<p>Calling this method gets the underlying balance of the owner. <pre><code>function balanceOfUnderlying(address owner) external returns (uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>owner:</code> the address of the account.</li> </ul> </li> <li>Returns: The amount of underlying owned by owner.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#supply-rate","title":"Supply Rate","text":"<p>Calling this method gets the current per-block supply interest rate for this jToken. <pre><code>function supplyRatePerBlock() external view returns (uint)\n</code></pre></p> <ul> <li>Parameter description: N/A</li> <li>Returns: The supply interest rate per block, scaled by 1e18.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#total-reserves","title":"Total Reserves","text":"<p>Calling this method gets the reserves. Reserve represents a portion of historical interest set aside as cash which can be withdrawn or transferred through the protocol's governance. <pre><code>function totalReserves() returns (uint)\n</code></pre></p> <ul> <li>Parameter description: N/A</li> <li>Returns: The total amount of reserves.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#reserve-factor","title":"Reserve Factor","text":"<p>Calling this method gets the current reserve factor. <pre><code>function reserveFactorMantissa() returns (uint)\n</code></pre></p> <ul> <li>Parameter description: N/A</li> <li>Returns: The current reserve factor.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#liquidation-incentive","title":"Liquidation Incentive","text":"<p>By calling the liquidationIncentiveMantissa function of the Unitroller contract, liquidation incentives can be inquired. Liquidators will be given a proportion of the borrower's collateral as an incentive, which is defined as liquidation incentive. This is to encourage liquidators to perform liquidation of underwater accounts. <pre><code>function liquidationIncentiveMantissa() view returns (uint)\n</code></pre></p> <ul> <li>Parameter description: N/A</li> <li>Returns: The liquidationIncentive, scaled by 1e18, is multiplied by the closed borrow amount from the liquidator to determine how much collateral can be seized.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#get-account-liquidity","title":"Get Account Liquidity","text":"<p>By calling the getAccountLiquidity function of the Unitroller contract, account information can be accessed through an account's address to determine whether the account should be liquidated or not. <pre><code>getAccountLiquidity(address account) view returns (uint, uint, uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>account:</code> user address.</li> </ul> </li> <li>Returns: The amount of underlying owned by owner.<ul> <li><code>error:</code> error code, 0 means success.</li> <li><code>liquidity:</code> liquidity.</li> <li><code>shortfall:</code> When the value is bigger than 0, the current account does not meet the market requirement for collateralization and needs to be liquidated.</li> </ul> </li> </ul> <p>Note: There should be at most one non-zero value between liquidity and shortfall.</p>"},{"location":"developers/supply_and_borrow_market/sbm/#write-interface","title":"Write Interface","text":""},{"location":"developers/supply_and_borrow_market/sbm/#borrow","title":"Borrow","text":"<p>Calling this method borrows assets from JustLend DAO protocol to the sender's owner address. <pre><code>function borrow(uint borrowAmount) external returns (uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>borrowAmount:</code> the amount of the underlying asset to borrow.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#event","title":"Event","text":"<pre><code>Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows, uint borrowIndex)\n</code></pre> <ul> <li>Emits when user successfully borrow.<ul> <li><code>borrower:</code> address of borrow assets account;</li> <li><code>borrowAmount:</code> the amount of borrowed assets;</li> <li><code>accountBorrows:</code> the account borrow the assets;</li> <li><code>totalBorrows:</code> total borrow assets form the account;</li> <li><code>borrowIndex:</code> the index of this borrow order.</li> </ul> </li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#repayborrow","title":"repayBorrow","text":"<p>Calling this method repays their own borrow. <pre><code>function repayBorrow(uint amount) external payable\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>amount:</code> the amount of the asset to repay.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#event_1","title":"Event","text":"<pre><code>RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows, uint borrowIndex)\n</code></pre> <ul> <li>Emits when user successfully repay borrow.<ul> <li><code>payer:</code> operate repay borrow;</li> <li><code>borrower:</code> address of borrow assets account;</li> <li><code>repayAmount:</code> the amount of repaid assets;</li> <li><code>accountBorrows:</code> the account borrow the assets;</li> <li><code>totalBorrows:</code> total borrow assets form the account;</li> <li><code>borrowIndex:</code> the index of this borrow order.</li> </ul> </li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#repayborrowbehalf","title":"repayBorrowBehalf","text":"<p>Calling this method repays their own borrow. <pre><code>function repayBorrow(uint amount) external payable\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>borrower:</code> the account with the debt being paid off.</li> <li><code>msg.value:</code> the amount to repay.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#mint","title":"Mint","text":"<p>Calling this method supplies assets into the market and receives jTokens in exchange. <pre><code>function mint() external payable\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>msg.value:</code> the amount of TRX to supply.</li> </ul> </li> <li>Returns: None, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#event_2","title":"Event","text":"<pre><code>Mint(address minter, uint mintAmount, uint mintTokens)\n</code></pre> <ul> <li>Emits when user successfully mint.<ul> <li><code>minter:</code> operate supply assets into the market;</li> <li><code>mintAmount:</code> the amount of supplied assets;</li> <li><code>mintTokens:</code> the tokens need to mint.</li> </ul> </li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#redeem","title":"Redeem","text":"<p>Calling this method redeems jTokens in exchange for the underlying asset and accrues interest whether or not the operation succeeds. <pre><code>function redeem(uint redeemTokens) external returns (uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>redeemTokens:</code>  the number of jTokens to redeem into underlying.</li> </ul> </li> <li>Returns: 0 for success, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#event_3","title":"Event","text":"<pre><code>Redeem(address redeemer, uint redeemAmount, uint redeemTokens)\n</code></pre> <ul> <li>Emits when user successfully redeem.<ul> <li><code>redeemer:</code> operate redeem jTokens;</li> <li><code>redeemAmount:</code> the amount of redeem assets;</li> <li><code>redeemTokens:</code> the tokens need to redeem.</li> </ul> </li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#redeemunderlying","title":"RedeemUnderlying","text":"<p>Calling this method redeems jTokens in exchange for a specified amount of underlying asset. <pre><code>function redeemUnderlying(uint redeemAmount) external returns (uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>redeemAmount:</code> the amount of underlying to redeem.</li> </ul> </li> <li>Returns: 0 for success, reverts on error.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#transfer","title":"Transfer","text":"<p>Calling this method transfers a specified amount of jtokens to the destination. This action will fail if the account's liquidity become negative due to the transfer. <pre><code>function transfer(address dst, uint256 amount) external nonReentrant returns (bool)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>dst:</code> the receiver's address.</li> <li><code>amount:</code> amount of token to be transferred.</li> </ul> </li> <li>Returns: A boolean value indicating whether or not the transfer succeeded.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#liquidate-borrowjtrc20","title":"Liquidate Borrow\uff08jTrc20\uff09","text":"<p>By calling liquidateBorrow function of the corresponding jTrc20 contract (e.g. jUSDT), accounts whose liquidity does not meet the market requirement for collateralization will be liquidated by other users to restore the account liquidity to a normal level (i.e. higher than the market requirement for collateralization). In the event of liquidation, liquidators may repay part or 50% of the loan for the borrower. Liquidators will be given a proportion of the borrower's collateral as an incentive. <pre><code>function liquidateBorrow(address borrower, uint repayAmount, address jTokenCollateral) returns (uint)\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>borrower:</code> address of a liquidated account.</li> <li><code>repayAmount:</code> amount of token to be repaid in the event of liquidation (measured in the borrowed asset).</li> <li><code>jTokenCollateral:</code> address of the jTOKEN contract to set aside the collateralized asset of a borrower.</li> </ul> </li> <li>Returns: 0 on success, otherwise an Error code.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#liquidate-borrowjtrx","title":"Liquidate Borrow\uff08jTRX\uff09","text":"<p>By calling the liquidateBorrow function of the jTRX contract, accounts whose liquidity does not meet the market requirement for collateralization will be liquidated by other users to restore the account liquidity to a normal level (i.e., higher than the market requirement for collateralization). In the event of liquidation, liquidators may repay part or 50% of the loan for the borrower. Liquidators will be given a proportion of the borrower's collateral as an incentive. <pre><code>function liquidateBorrow(address borrower, address jTokenCollateral) payable\n</code></pre></p> <ul> <li>Parameter description:<ul> <li><code>borrower:</code> address of a liquidated account.</li> <li><code>jTokenCollateral:</code> address of the jTRX contract to set aside the collateralized asset of a borrower.</li> <li><code>msg.value:</code> amount of TRX to be repaid in the event of liquidation.</li> </ul> </li> <li>Returns: No return. If any error occurs, the transaction will be reverted.</li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#event_4","title":"Event","text":"<pre><code>LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens)\n</code></pre> <ul> <li>Emits when user successfully liquidate borrow order.<ul> <li><code>liquidator:</code> operate liquidation;</li> <li><code>borrower:</code> address of a liquidated account;</li> <li><code>repayAmount:</code> the amount of repaid assets;</li> <li><code>cTokenCollateral:</code> address of the jTRX contract to set aside the collateralized asset of a borrower\uff1b</li> <li><code>seizeTokens:</code> the tokens need to be liquidated.</li> </ul> </li> </ul>"},{"location":"developers/supply_and_borrow_market/sbm/#error-code-and-failure-info","title":"Error Code And Failure info","text":""},{"location":"developers/supply_and_borrow_market/sbm/#error-code","title":"Error code","text":"Code Name Description 0 NO_ERROR Not a failure. 1 UNAUTHORIZED The sender is not authorized to perform this action. 2 BAD_INPUT An invalid argument was supplied by the caller. 3 COMPTROLLER_REJECTION The action would violate the comptroller policy. 4 COMPTROLLER_CALCULATION_ERROR An internal calculation has failed in the comptroller. 5 INTEREST_RATE_MODEL_ERROR The interest rate model returned an invalid value. 6 INVALID_ACCOUNT_PAIR The specified combination of accounts is invalid. 7 INVALID_CLOSE_AMOUNT_REQUESTED The amount to liquidate is invalid. 8 INVALID_COLLATERAL_FACTOR The collateral factor is invalid. 9 MATH_ERROR A math calculation error occurred. 10 MARKET_NOT_FRESH Interest has not been properly accrued. 11 MARKET_NOT_LISTED The market is not currently listed by its comptroller. 12 TOKEN_INSUFFICIENT_ALLOWANCE ERC-20 contract must allow Money Market contract to call transferFrom. The current allowance is either 0 or less than the requested supply, repayBorrow or liquidate amount. 13 TOKEN_INSUFFICIENT_BALANCE Caller does not have sufficient balance in the ERC-20 contract to complete the desired action. 14 TOKEN_INSUFFICIENT_CASH The market does not have a sufficient cash balance to complete the transaction. You may attempt this transaction again later. 15 TOKEN_TRANSFER_IN_FAILED Failure in ERC-20 when transfering token into the market. 16 TOKEN_TRANSFER_OUT_FAILED Failure in ERC-20 when transfering token out of the market."},{"location":"developers/supply_and_borrow_market/sbm/#failure-info","title":"Failure info","text":"Code Name 0 ACCEPT_ADMIN_PENDING_ADMIN_CHECK 1 ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED 2 ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED 3 ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED 4 ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED 5 ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED 6 ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED 7 BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED 8 BORROW_ACCRUE_INTEREST_FAILED 9 BORROW_CASH_NOT_AVAILABLE 10 BORROW_FRESHNESS_CHECK 11 BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED 12 BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED 13 BORROW_MARKET_NOT_LISTED 14 BORROW_COMPTROLLER_REJECTION 15 LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED 16 LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED 17 LIQUIDATE_COLLATERAL_FRESHNESS_CHECK 18 LIQUIDATE_COMPTROLLER_REJECTION 19 LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED 20 LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX 21 LIQUIDATE_CLOSE_AMOUNT_IS_ZERO 22 LIQUIDATE_FRESHNESS_CHECK 23 LIQUIDATE_LIQUIDATOR_IS_BORROWER 24 LIQUIDATE_REPAY_BORROW_FRESH_FAILED 25 LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED 26 LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED 27 LIQUIDATE_SEIZE_COMPTROLLER_REJECTION 28 LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER 29 LIQUIDATE_SEIZE_TOO_MUCH 30 MINT_ACCRUE_INTEREST_FAILED 31 MINT_COMPTROLLER_REJECTION 32 MINT_EXCHANGE_CALCULATION_FAILED 33 MINT_EXCHANGE_RATE_READ_FAILED 34 MINT_FRESHNESS_CHECK 35 MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED 36 AMINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED 37 MINT_TRANSFER_IN_FAILED 38 MINT_TRANSFER_IN_NOT_POSSIBLE 39 REDEEM_ACCRUE_INTEREST_FAILED 40 REDEEM_COMPTROLLER_REJECTION 41 REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED 42 REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED 43 REDEEM_EXCHANGE_RATE_READ_FAILED 44 REDEEM_FRESHNESS_CHECK 45 REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED 46 REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED 47 REDEEM_TRANSFER_OUT_NOT_POSSIBLE 48 REDUCE_RESERVES_ACCRUE_INTEREST_FAILED 49 REDUCE_RESERVES_ADMIN_CHECK 50 REDUCE_RESERVES_CASH_NOT_AVAILABLE 51 REDUCE_RESERVES_FRESH_CHECK 52 REDUCE_RESERVES_VALIDATION 53 REPAY_BEHALF_ACCRUE_INTEREST_FAILED 54 REPAY_BORROW_ACCRUE_INTEREST_FAILED 55 REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED 56 REPAY_BORROW_COMPTROLLER_REJECTION 57 REPAY_BORROW_FRESHNESS_CHECK 58 REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED 59 REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED 60 REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE 61 SET_COLLATERAL_FACTOR_OWNER_CHECK 62 SET_COLLATERAL_FACTOR_VALIDATION 63 SET_COMPTROLLER_OWNER_CHECK 64 SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED 65 SET_INTEREST_RATE_MODEL_FRESH_CHECK 66 SET_INTEREST_RATE_MODEL_OWNER_CHECK 67 SET_MAX_ASSETS_OWNER_CHECK 68 SET_ORACLE_MARKET_NOT_LISTED 69 SET_PENDING_ADMIN_OWNER_CHECK 70 SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED 71 SET_RESERVE_FACTOR_ADMIN_CHECK 72 SET_RESERVE_FACTOR_FRESH_CHECK 73 SET_RESERVE_FACTOR_BOUNDS_CHECK 74 TRANSFER_COMPTROLLER_REJECTION 75 TRANSFER_NOT_ALLOWED 76 TRANSFER_NOT_ENOUGH 77 TRANSFER_TOO_MUCH"},{"location":"getting_started/overview/","title":"Overview","text":"<p>JustLend DAO is a cutting-edge money market protocol powered by TRON, designed to create fund pools with interest rates determined by an algorithm based on the supply and demand of TRON assets. The protocol involves two main roles: suppliers and borrowers, who engage directly with the platform to earn or pay floating interest rates.</p> <p>Each money market on JustLend DAO represents a specific TRON asset, including TRX, TRC20 stablecoins like USDT, and other TRC20-based tokens. The platform features an open and transparent ledger that records all transactions and historical interest rates, ensuring transparency and trust among users. </p>"},{"location":"getting_started/overview/#core-architecture-of-justlend-dao","title":"Core Architecture of JustLend DAO","text":"<ul> <li> <p>Suppliers: supply assets to the money markets of JustLend DAO smart contracts, and the assets supplied are the underlying assets.</p> <ul> <li>Smart contracts distribute jToken that corresponds to underlying assets to users' accounts at the exchange rate.</li> <li>Supplied assets to JustLend DAO money markets can enjoy interest earnings on their loans.Redeem: Suppliers can redeem the underlying assets they have supplied at any time.</li> </ul> </li> <li> <p>Redeem: suppliers can redeem the underlying assets they have supplied at any time.</p> </li> <li> <p>Borrowers: over-collateralize an asset can borrow from the corresponding market on JustLend DAO.</p> <ul> <li>Unlike P2P lending, borrowers do not have to negotiate with suppliers: orders will be automatically matched by JustLend DAO smart contracts as long as the token market has sufficient liquidity.</li> <li>Borrowing interest rates are determined by JustLend DAO smart contracts in real-time based on market supply and demand. Within a block, borrowers of the same token share the same borrowing interest rate.</li> </ul> </li> <li> <p>Repay: borrowers can repay their loans at any time.</p> </li> <li> <p>Liquidation: if the value of a borrower's collateralized assets falls below the liquidation threshold, JustLend DAO smart contracts will trigger liquidation automatically.</p> </li> </ul>"},{"location":"getting_started/concepts/borrow/","title":"Borrow","text":"<p>The JustLend DAO offers user an efficient way to access liquidity by using their supplied assets as collateral. This approach unlocks capital without requiring users to sell their holdings, making it a powerful tool for managing financial needs. However, borrowers must remain vigilant about potential risks, especially liquidation.</p>"},{"location":"getting_started/concepts/borrow/#how-it-works","title":"How It Works","text":"<p>Borrowing on JustLend DAO is simple and dynamic. Users can leverage their deposited assets to borrow tokens, with interest rates determined by the protocol\u2019s utilization rate\u2014the percentage of supplied liquidity currently borrowed. As borrowing demand increases, utilization rates rise, leading to higher interest rates. This dynamic adjustment ensures a balanced ecosystem that benefits both borrowers and suppliers.</p> <p>Dynamic Interest Rates: Interest rates are influenced by protocol mechanics and community governance, adapting to changes in borrowing activity. This system allows the platform to respond effectively to market conditions.</p> <p>Reserve Parameters: Each reserve in the JustLend DAO Protocol is designed with specific parameters to attract both borrowers and suppliers, ensuring a steady flow of liquidity.</p> <p>Liquidation Risk: Borrowers face liquidation if their risk value over the required threshold. To mitigate this, it\u2019s essential to monitor collateralisation levels and maintain a healthy health factor.</p>"},{"location":"getting_started/concepts/borrow/#how-do-i-supply-assets","title":"How Do I Supply Assets","text":"<p>Borrowing can be done with a user interface JustLend SBM. Before we walk through the steps of a borrowing sequence, let\u2019s cover some key parameters:</p> <ul> <li><code>Borrow APY:</code> the cost of borrowing assets in the JustLend DAO Protocol, which can vary based on the overall utilization of the liquidity pool\uff1b</li> <li><code>Total Borrow:</code> the total borrow amount in the market. As the total borrow changes, the borrow APY will also change accordingly;</li> <li><code>Borrowers:</code> the amount of users participating in the borrow market;</li> <li><code>Collateral Factor:</code> the amount of asset you can borrow compared to the value of jTokens you own. It determines the maximum amount you can borrow based on your supplied asset in this market;</li> <li><code>Borrow limit:</code> the minimum amount required to participate in the borrowing market;</li> <li><code>Liquidation:</code> a borrowing account becomes insolvent when the borrow balance exceeds the amount allowed by the collateral factor. Other users can repay a portion of its outstanding borrow in exchange for a portion of its collateral, with a liquidation incentive.</li> </ul>"},{"location":"getting_started/concepts/borrow/#supply-assets","title":"Supply Assets","text":"<ol> <li>Connect your Web3 wallet on TronLink or other supported wallet app to the JustLend DAO (https://justlend.org).</li> <li>Navigate to the \"SBM\" and choose the asset you want to borrow from the supported assets listed on the markets. For example, if you want to borrow TRX, click \u300cBorrow\u300d on the TRX market.</li> <li>Specify the amount you want to borrow and confirm the transaction.</li> </ol>"},{"location":"getting_started/concepts/energy_rental/","title":"Energy Rental","text":"<p>JustLend DAO integrates the energy rental protocol, which aims to provide users with a more convenient and cheaper way to obtain energy. The energy rental protocol is open to all TRON network users and supports one-to-many renting, enabling users to rent energy not only for themselves but also for others. The user-friendly interface is designed to accommodate users managing multiple orders seamlessly.</p> <p>When renting energy, you need to specify three key parameters based on your requirements, which are Rental Amount, Rental Duration and Receiving Address.</p> <ul> <li> <p>Rental Amount: the amount of energy you need.</p> <ul> <li>The actual energy rented is calculated based on the corresponding proxy TRX amount. Due to market fluctuations, the rented energy amount may experience slight changes during the transaction;</li> <li>Note: the energy used will be fully restored after 24 hours and can be used again;</li> <li>If you are not sure about the amount of energy you need, please refer to: One USDT transfer transaction \u2248 120,000 energy. (may fluctuate according to market trading conditions).</li> </ul> </li> <li> <p>Rental Duration: this is the time you need to use the energy.</p> <ul> <li>Supports renting by the hour or by the day, with a maximum single rental period of 30 days\uff1b</li> <li>Rental duration is calculated at the time of placing the order. Market price fluctuations may result in slight increases or decreases in actual usage time;</li> <li>Note: Shorter rental durations are more affected by market price volatility. If the rental duration is less than 3 hours, please be sure to cancel the rent immediately after completing the transaction. This will prevent early liquidation due to price fluctuations and avoid unnecessary losses.</li> </ul> </li> <li> <p>Receiving Address: the address where the rented energy will be allocated.</p> <ul> <li>If you rent for yourself, this field is not required. If renting for another address, this field is required.</li> <li>Note: Renting for contract addresses is not supported.</li> </ul> </li> </ul>"},{"location":"getting_started/concepts/energy_rental/#placing-an-order","title":"Placing An Order","text":"<p>Once the parameters are set, you can place an order to proceed with the transaction. The rental protocol will require a prepayment, which includes a deposit and rental fee:</p> <ul> <li> <p>Deposit Fee: calculated as 0.05% of the TRX required for the rental energy, with a minimum deposit of 40 TRX.</p> <ul> <li>If the rent order is returned on time, the deposit is fully refunded. If not returned before expiry, the order may be liquidated, and the deposit will be forfeited to community liquidators as a reward.</li> </ul> </li> <li> <p>Rental Fee: includes Occupation Fee (charges based on the rental duration) and Usage Fee (charges based on the rental amount):</p> <ul> <li>Occupation Fee: the energy you use is charged based on the time you use. The longer you use, the more you will be charged.<ul> <li>The prepayment includes the occupancy fee for your entire rental time. If you terminate the rent early, the occupancy fee will be refunded in proportion to the occupancy time.</li> </ul> </li> </ul> </li> <li> <p>Usage Fee: the cost of your energy usage fee is charged as one day's rental fee based on the amount of energy you rent.</p> <ul> <li>Since it takes 24 hours for energy to recover after use, the usage fee is charged based on 1 day.</li> <li>when you return to the energy:<ul> <li>If the energy has been fully restored, the usage fee will be fully refunded;</li> <li>If the energy has been used up, 0.5 days of usage fee will be deducted from your account;</li> <li>If part of the energy has been used, your usage fee will be deducted proportionally.</li> </ul> </li> </ul> </li> </ul> <p>After completing the rental transaction, you can manage your orders via the energy rental interface. Options include returning the rent, extending the rent order, viewing the actual energy received, and checking the remaining rental duration.</p> <p>We recommend users customize their leasing plans based on their specific needs: * For single transactions, we recommend returning the energy immediately after use. This avoids liquidation and helps save on occupation fees. * For users with regular daily transactions, we suggest opting for a long-term hassle-free rental plan by renting energy for 30 days based on daily energy consumption. With the 24-hour full restoration rule, there is no need to rent excessive amounts of energy.</p>"},{"location":"getting_started/concepts/energy_rental/#cost-estimation","title":"Cost Estimation","text":"<p>To provide a clearer understanding of the costs involved in transferring USDT by renting energy versus directly burning TRX, we present the following cost estimates through two examples:</p> <p>Scenario 1: Renting 200k Energy for One Day to Transfer USDT</p> <p>After renting 200k energy for one day, the USDT transfer is completed, and the rental is terminated immediately. The costs associated with this scenario are based on the prepayment and potential refund formulas previously outlined.</p> Receiver holding USDT Receiver without USDT Calculation details Txn example rent energy cost - 65.363749 - 65.363749 65.363749 for rent 200k energy rentTxn rent energy gas - 2.153090 - 2.153090 1.77009 burn for energy; 0.383 burn for bandwidth rentTxn transfer USDT gas - 0.345000 - 0.345000 0.345 for USDT bandwidth whatever holding USDT or not noUsdtTxn; holdingUsdtTxn return energy gas - 0.378000 - 0.378000 return txn just burn bandwidth for gas holdingUsdtReturnTxn; noUsdtTxn refund 60.413664 59.262775 return TRX when end rent total energy rent cost - 7.826175 - 8.977064 total cost (in USD) - $1.57 - $1.80 0.20USDpreTRX <p>Scenario 2: Directly Burning TRX to Transfer USDT Without Energy</p> <p>In this scenario, TRX is burned directly to facilitate the USDT transfer without renting any energy. The cost incurred here is solely dependent on the amount of TRX burned for the transaction.</p> Receiver holding USDT Receiver without USDT Calculation details Txn example burn TRX cost - 27.344700 - 55.064700 130,285 energy for notholding USDT; 64,285 energy for holding USDT; 345 bandwidth cost 0.345 TRX transfer to a without USDT address; transfer to a holding USDT address total cost (in USD) - $5.4689 - $11.0129 0.20USDpreTRX <p>Comparison Insight</p> <p>By comparing these two scenarios, it becomes evident that the cost of using rented energy for transaction cost is significantly lower than the cost of directly burning TRX. Additionally, the presence of USDT in the receiving address affects the computational load of the contract, which in turn impacts the overall transaction cost.</p> Receiver holding USDT Receiver without USDT rent energy cost $1.57 $1.80 burn TRX cost $5.4689 $ 11.0129 save - $3.8989 - $9.2129"},{"location":"getting_started/concepts/liquidations/","title":"Liquidations","text":"<p>Liquidation is determined by Risk Value, which is a critical metric within the JustLend DAO Protocol that measures the safety of a borrow position. It is calculated as:</p>      Risk Value = Total Borrow / Borrow Limit * 100  <ul> <li><code>Total Borrow:</code> sum of all assets borrowed by the user;</li> <li><code>Borrow Limit:</code> \u2211 (Asset supplied by the user * Collateral Factor of the asset).</li> </ul> <p>The Risk Value measures a borrow position\u2019s stability. The Borrow Limit, set by JustLend DAO Governance for each asset, determines the maximum percentage of value that can be borrowed against the asset. For example, if a user supplies $100 in TRX with an collateral factor 80% and $200 in SUN with an collateral factor 75%. Then, borrows $90 worth of USDD and $50 worth of JST tokens from SBM. we can see:</p> <p>Borrow Limit  =  \u2211 (Asset supplied * Collateral Factor) = 100 * 80% + 200 * 75% = 230</p> <p>Risk Value  =  Total Borrow / Borrow Limit * 100 = (90 + 50) / 230 * 100 = 60.87</p> <p>A risk value above 100 represents a position that is above the liquidation threshold. Regular monitoring is essential, as the risk value fluctuates based on both the value of collateral factor and borrowed assets. To reduce the risk value , users can either supply more collateral or repay part of the borrow position. The risk value is directly tied to collateral value. If the collateral value increases, the risk value  decrease; if it falls, the risk value increases, increasing the risk of liquidation.</p> Range Levels of risk Recommendations 0-35 Low Risk Healthy portfolio, eligible for loans. 35-60 Medium Risk Healthy portfolio overall, eligible for extra loan, but with caution. 60-80 High Risk High Risk Portfolio faces risk of liquidation, and you are advised to add collateral or pay off part of your loans. 80-100 Extremely High Risk Collaterals are about to be liquidated, and you are advised to add collateral or pay off part of your loans. <p>Liquidation occurs when a borrower\u2019s risk value exceeds 100, indicating that their collateral is insufficient to cover the borrowed amount. This can happen due to a decline in collateral value or an increase in the borrowing amount. During a liquidation, a liquidator can repay up to 50% of a borrower's debt for a single asset in one liquidation transaction, and a liquidation fee is applied to the borrower\u2019s collateral. As a permissionless process, any network participant can initiate the liquidation of an eligible position.</p>"},{"location":"getting_started/concepts/liquidations/#liquidation-tool","title":"Liquidation Tool","text":"<p>Liquidation will be triggered when the risk value of your positions hits 100. The liquidator will settle the debt (in the borrowed token), take away the supplied asset (in the corresponding jToken), and earn a liquidation reward equal to 8% of the repaid debt value. It should be noted that each liquidation can only cover the debt of one token.</p> <p>As a borrower, please keep a close eye on your risk value to prevent liquidation. Once liquidation occurs, you will find a record of your jTokens being transferred out of your wallet.</p> <p>Note: Before you proceed to use the liquidation tool, please be advised that you must first agree to the terms outlined in the Liquidation Tool Disclaimer. This disclaimer is designed to inform you of the risks, responsibilities, and conditions associated with the use of liquidation tool. By proceeding to use the liquidation tool, you confirm that you have read, understood, and accept the terms of the disclaimer. If you do not agree with any part of the disclaimer, you are not permitted to utilize liquidation tool and discontinue use immediately.</p>"},{"location":"getting_started/concepts/repay/","title":"Repay","text":"<p>Repaying borrowed tokens is a critical aspect of managing borrow positions on the JustLend DAO Protocol. With flexible repayment options and user-friendly tools, JustLend DAO makes it easy for borrowers to maintain healthy collateralisation ratios and prevent liquidation risks.</p> <p>Borrowers can repay their loans using the same tokens they borrowed or through jTokens (collateral tokens) of the same underlying asset. Here are some benefits of repayment:</p> <ul> <li>By reducing the outstanding borrow amount, repayment strengthens the collateralisation ratio, ensuring the position remains adequately collateralised;</li> <li>A higher collateralisation ratio minimizes the risk of liquidation by maintaining a safe margin between the collateral value and the borrowed amount;</li> <li>Repayment allows borrowers to safely withdraw a portion of their collateral, offering greater flexibility in managing their assets.</li> </ul>"},{"location":"getting_started/concepts/repay/#how-do-i-repay-assets","title":"How Do I Repay Assets","text":"<ol> <li>Connect your Web3 wallet on TronLink or other supported wallet app to the JustLend DAO (https://justlend.org).</li> <li>Navigate to the \"SBM\" and choose the borrowed asset you want to withdraw, click \u300cRepay\u300d.</li> <li>Specify the amount you want to repay and confirm the transaction.</li> </ol>"},{"location":"getting_started/concepts/risks/","title":"Risks","text":"<p>The JustLend  DAO Protocol provides decentralized and efficient access to liquidity, empowering users across the TRON ecosystem. However, as with any decentralized finance (DeFi) protocol, there are inherent risks involved. To address these, JustLend has implemented robust risk management measures, ensuring user confidence and protocol resilience. Below, we outline the key risks and the steps taken to mitigate them.</p>"},{"location":"getting_started/concepts/risks/#smart-contract-risk","title":"Smart Contract Risk","text":"<p>Smart contracts are critical to the functioning of the JustLend DAO Protocol, but they can sometimes contain bugs or vulnerabilities in their code, which may compromise the protocol\u2019s security or its reserve tokens. These vulnerabilities could potentially be exploited by malicious actors, affecting the integrity of transactions and liquidity.</p>"},{"location":"getting_started/concepts/risks/#mitigation-measures","title":"Mitigation Measures:","text":"<ul> <li>Public Code Audits: JustLend DAO's smart contract code is publicly available for external audits. It has undergone multiple professional third-party audits by recognized experts to identify and address any vulnerabilities;</li> <li>Community Review: Any proposed changes to the protocol are thoroughly reviewed and approved by the JustLend DAO community before implementation, ensuring collective oversight;</li> <li>Bug Bounty Program: To further reduce the risk of undiscovered vulnerabilities, JustLend DAO runs an ongoing bug bounty program. This incentivizes external developers to identify and report potential issues, allowing them to be fixed before they can cause harm.</li> </ul>"},{"location":"getting_started/concepts/risks/#oracle-risk","title":"Oracle Risk","text":"<p>JustLend DAO relies on third-party oracles to provide essential data, such as price feeds and redemption ratios for liquid staking tokens. While oracles are vital to the protocol, their reliance introduces the risk of incorrect data being provided if an oracle fails or is compromised. This could lead to inaccurate valuations and potentially harmful actions within the protocol, such as incorrect collateral liquidation or improper lending terms.</p>"},{"location":"getting_started/concepts/risks/#mitigation-measures_1","title":"Mitigation Measures:","text":"<ul> <li>Decentralized Oracles: To minimize the risks associated with centralization, JustLend DAO utilizes decentralized oracles like WinkLink, which provide tamper-resistant data feeds. This ensures greater reliability and security, as the data is less susceptible to manipulation or errors from a single source;</li> <li>Community Review: These decentralized oracles are also equipped with additional security measures that further protect the integrity of the data, reducing the likelihood of inaccurate or malicious inputs.</li> </ul>"},{"location":"getting_started/concepts/risks/#collateral-risk","title":"Collateral Risk","text":"<p>The assets used as collateral within the JustLend DAO Protocol are subject to market fluctuations. A sharp decline in the value or liquidity of collateral could lead to under-collateralization or even bad debt, which poses a risk to both lenders and the platform as a whole. Without proper safeguards, this could lead to liquidations that do not cover the full value of outstanding loans, resulting in losses for stakeholders.</p>"},{"location":"getting_started/concepts/risks/#mitigation-measures_2","title":"Mitigation Measures:","text":"<ul> <li>Risk Service Providers: JustLend DAO partners with reputable risk service providers that continuously monitor the performance of collateral and assess the stability of the market. These services help detect potential risks early and ensure that the collateral remains adequate to cover outstanding loans;</li> <li>Risk Parameters: JustLend DAO has set key risk parameters, such as, which are borrow limit, designed to protect the protocol from sudden market changes. These parameters help ensure that collateral remains sufficient to secure the borrows, reducing the likelihood of under-collateralization;</li> <li>Governance Oversight: The JustLend DAO community and governance framework play a crucial role in adjusting these risk parameters based on market conditions. This allows the protocol to remain adaptable and respond to fluctuations in the market, ensuring a balanced and secure lending environment.</li> </ul>"},{"location":"getting_started/concepts/risks/#risk-alert","title":"Risk Alert","text":""},{"location":"getting_started/concepts/risks/#why-cant-i-receive-email-notifications","title":"Why can't I receive email notifications?","text":"<p>If you have enabled \u201cRisk Alert\u201d yet still fail to receive email notifications even when the trigger conditions are met, check the following settings:</p> <ol> <li>Mailbox Settings</li> <li>Junk folder: Check the junk folder in your mailbox. Sometimes, email notifications can be mistakenly classified as junk emails. If you find the target notification in the junk folder, move it to your inbox or add the sender to your \u201cContacts\u201d.</li> <li>Email filters: Verify if your email service provider has set filters that have blocked or filtered out the email notifications. It is important to make sure the sender\u2019s address is added to your whitelist or allowlist.</li> <li>Email Sending Issues</li> <li>Sending delays: Sometimes, email notifications may not come through quickly due to the delay issues. Please be patient and check your inbox again later.</li> <li>Sending failures: If your emails cannot be sent or are rejected, you may also experience difficulty in receiving email notifications. In this case, you can check your outbox about this kind of issue and try again in the JustLend platform.</li> <li>User Information</li> <li>Incorrect email address: Make sure you have provided a correct email address in the \u201cRisk Alert\u201d service on JustLend DAO and have verified that your address functions well.</li> </ol>"},{"location":"getting_started/concepts/staked_trx/","title":"Staked TRX","text":"<p>Staked TRX is a feature launched by JustLend DAO that enables one-click TRX staking in accordance with Stake 2.0 rules. Once you have staked your TRX, JustLend DAO will take care of the cumbersome procedures, such as Super Representative (SR) voting and reward claiming, and rent out the Energy obtained from TRX staking automatically to generate more yields for you.</p> <p>The SRs receiving your TRON Power obtained from staking TRX will be decided via voting by sTRX Governance. The whole process will be open, transparent, and fully decentralized.</p>"},{"location":"getting_started/concepts/staked_trx/#architecture-of-the-strx-system","title":"Architecture of the sTRX system","text":"<ul> <li> <p>TRX Holders: deposit TRX into the TRC484 contract to receive sTRX at the current exchange rate.</p> </li> <li> <p>sTRX Holders:</p> <ul> <li>Convert sTRX back to TRX at the exchange rate to exit the system;</li> <li>Participate in the governance of TRC484, including Super Representative (SR) voting, resource market interest rate adjustments, and other decisions;</li> <li>Use sTRX as a standard TRC20 token to engage with various applications within the TRON ecosystem.</li> </ul> </li> <li> <p>Resource Consumers:</p> <ul> <li>Rent resources within TRC484 by staking TRX (TRX deposited in sTRX system cannot be used for this purpose);</li> <li>Return rented resources, pay the rental fees, and reclaim the remaining staked TRX in TRC484.</li> </ul> </li> <li> <p>Liquidators: liquidate overdue resource rental transactions and earn liquidation rewards.</p> </li> </ul>"},{"location":"getting_started/concepts/staked_trx/#staked-trx-yield","title":"Staked TRX Yield","text":"<p>The sources of yields form staking TRX is mainly composed of two parts:</p> <ul> <li>Voting rewards: the rewards for voting TRON Power obtained from TRX staking to SRs;</li> <li>Energy rental rewards: the revenue from Energy Rental on JustLend DAO, distributed to stakers according to the amount and percentage of TRX they have staked.</li> </ul> <p>The staking APY fluctuates with the changes in voting rewards and the Energy rental market. You can check the latest APY anytime in Staked TRX page.</p>"},{"location":"getting_started/concepts/staked_trx/#stake-and-unstake-trx","title":"Stake and Unstake TRX","text":"<ul> <li> <p>Connect your Web3 wallet on TronLink or other supported wallet app to the JustLend DAO (https://justlend.org).</p> </li> <li> <p>Stake TRX:</p> <ul> <li>Navigate to the \"Staked TRX\" page, you will see the latest Staked APY;</li> <li>Specify the amount you want to stake, click \u300cStake Now\u300d;</li> <li>Cofirm the transaction, then you will receive a proportionate amount of sTRX as the receipt.</li> </ul> </li> <li> <p>Unstake TRX:</p> <ul> <li>Unstake on JustLend DAO: Click the \u300cunstake\u300d tab, enter the amount of sTRX you want to unstake, and then confirm the transaction;</li> <li>Unstake via a third-party platform: You can initiate transactions on other platforms, such as HTX and SunSwap, to swap your sTRX.</li> </ul> </li> </ul> <p>If you unstake your sTRX on JustLend DAO, you need to wait for 14 days before withdrawing the unstaked TRX by clicking \u300cWithdraw\u300d on the same page.</p>"},{"location":"getting_started/concepts/supply/","title":"Supply","text":"<p>Supplying tokens to the JustLend DAO allows users to earn interest on their digital assets while simultaneously using them as collateral for borrowing. When users supply tokens, these assets are deposited into the JustLend DAO liquidity pool, a system of smart contracts designed to facilitate secure, over-collateralized borrowing.</p> <p>In return, users receive jTokens, TRC-20 tokens representing their supplied assets. jTokens can be redeemed at any time for the underlying assets. As interest accrues, the exchange rate of jTokens relative to the underlying assets increases over time, reflecting the earned interest. This ensures that users benefit from a seamless and dynamic interest compounding mechanism while maintaining liquidity through redeemable jTokens.</p>"},{"location":"getting_started/concepts/supply/#how-it-works","title":"How It Works","text":"<p>Interest Accrual: Supplied tokens automatically earn interest based on the current market supply rate. Interest is dynamically accrued as the balance of supplied tokens grows, ensuring that users benefit from up-to-date rates.</p> <p>Determining Interest Rates: Interest rates for suppliers are primarily influenced by the borrow utilization rate, which reflects the proportion of assets borrowed relative to the total pool supply. Governance parameters, such as the collateral factor and interest rates, can also be adjusted through community decisions.</p> <p>Dynamic Rate Updates: As tokens are supplied, borrowed, repaid, or withdrawn from the liquidity pool, interest rates are updated in real time. These adjustments are guided by on-chain data, including token balances, oracle-determined prices, and the borrow utilization ratio.</p>"},{"location":"getting_started/concepts/supply/#how-do-i-supply-assets","title":"How Do I Supply Assets","text":"<p>Supplying can be done with a user interface JustLend SBM. Before we walk through the steps of a supplying sequence, let\u2019s cover some key parameters:</p> <ul> <li><code>Supply APY:</code> the annual rewards from the jTokens users receive by supplying assets, which influenced by the borrow utilization rate and fluctuated by the time;</li> <li><code>Total Supply:</code> the total supply in the market. As the total supply changes, the Supply APY will also change accordingly;</li> <li><code>Suppliers:</code> the amount of users participating in the supply market.</li> </ul>"},{"location":"getting_started/concepts/supply/#supply-assets","title":"Supply Assets","text":"<ol> <li>Connect your Web3 wallet on TronLink or other supported wallet app to the JustLend DAO (https://justlend.org).</li> <li>Navigate to the \"SBM\" and choose the asset you want to supply. For example, if you want to supply TRX, click \u300cSupply\u300d on the TRX market.</li> <li>Specify the amount you want to supply. The selected assets are transferred directly from your wallet to JustLend DAO protocol, earning interest immediately. This interest will be automatically added to your Supply Balance.</li> </ol>"},{"location":"getting_started/concepts/withdraw/","title":"Withdraw","text":"<p>JustLend DAO empowers users to manage their assets effectively by enabling the withdrawal of supplied tokens. Suppliers can withdraw their tokens as long as there is sufficient liquidity in the reserve. The withdrawal amount is determined by the availability of underlying assets and the user\u2019s ability to maintain a sufficient collateral ratio for any active borrow positions.</p> <p>When withdrawing with an active borrow position, it\u2019s essential to carefully manage your collateralisation ratio to avoid liquidation. Reducing collateral will decrease the health status and increasing the risk of liquidation.</p>"},{"location":"getting_started/concepts/withdraw/#to-stay-safe","title":"To stay safe:","text":"<ul> <li>Monitor Your Risk Value: Ensure your risk value remains health even after the withdrawal;</li> <li>Stay Below the Liquidation Threshold: Check that your account maintains sufficient collateral to avoid crossing the liquidation parameters;</li> <li>Plan Withdrawals Carefully: Assess the impact of each withdrawal on your overall borrow position to prevent unintentional liquidation risks.</li> </ul>"},{"location":"getting_started/concepts/withdraw/#how-do-i-withdraw-assets","title":"How Do I Withdraw Assets","text":"<ol> <li>Connect your Web3 wallet on TronLink or other supported wallet app to the JustLend DAO (https://justlend.org).</li> <li>Navigate to the \"SBM\" and choose the supplied asset you want to withdraw, click \u300cWithdraw\u300d.</li> <li>Specify the amount you want to withdraw and confirm the transaction.</li> </ol>"},{"location":"getting_started/faqs/spending_cap_issue/","title":"Spending Cap Issue During Transactions","text":""},{"location":"getting_started/faqs/spending_cap_issue/#why-is-the-available-spending-cap-insufficient","title":"Why Is the Available Spending Cap Insufficient?","text":"<ul> <li> <p>If you previously set a custom Spending Cap during the approve transaction, and that Spending Cap has been partially used, you may encounter an \"Insufficient Spending Cap\" hint when the remaining Spending Cap is less than the amount of your current transaction.</p> <ul> <li>In this case, you will need to authorize again, and the new spending cap amount must be greater than or equal to the amount you intend to transact.</li> <li>Please note: a new authorization will overwrite the previous spending cap rather than add to the remaining balance. Therefore, always ensure that the new spending cap is at least equal to your intended transaction amount to avoid failure.</li> </ul> </li> <li> <p>If you selected the default \"Unlimited Spending Cap\" when authorizing for the first time, you will not encounter this issue.</p> </li> </ul>"},{"location":"getting_started/faqs/wallet_connection_questions/","title":"Wallet Connection Questions","text":""},{"location":"getting_started/faqs/wallet_connection_questions/#what-should-i-do-if-justlend-dao-doesnt-recognize-my-newly-installed-wallet-extension","title":"What should I do if JustLend DAO doesn't recognize my newly installed wallet extension?","text":"<p>Refresh the JustLend DAO page after downloading a new wallet extension, as this would help the platform detect your new extension. </p>"},{"location":"getting_started/faqs/wallet_connection_questions/#how-to-switch-networks-in-my-wallet","title":"How to switch networks in my wallet?","text":"<p>User interaction may differ in each wallet. However, in most wallets, you can switch networks in the top menu. Find and select TRON Mainnet in the network list, as shown in the following figures. </p>"},{"location":"getting_started/faqs/wallet_connection_questions/#why-does-not-my-connected-address-on-justlend-dao-change-to-the-target-address-after-i-switch-the-address-in-my-wallet","title":"Why does not my connected address on JustLend DAO change to the target address after I switch the address in my wallet?","text":"<p>In this case, there may be two status of your wallet connection on JustLend DAO: * If your wallet is disconnected, you can click the \u201cConnect Wallet\u201d button to connect your current address to JustLend DAO. This happens because the access to the current address has not been granted to JustLend DAO. * If your wallet address remains unchanged, refresh the page. Then, JustLend DAO will automatically connect to the new address. </p>"},{"location":"getting_started/faqs/wallet_connection_questions/#when-i-have-several-wallet-extensions-why-is-wallet-b-invoked-when-i-choose-to-connect-to-wallet-a","title":"When I have several wallet extensions, why is Wallet B invoked when I choose to connect to Wallet A?","text":"<p>This is because some wallet extensions may have flaws in their adaptability. It\u2019s recommended that you mainly use one wallet extension that suits your needs best. If multiple wallet extensions are needed, you can toggle off those wallet extensions that are not used at the moment in extension management to prevent this problem.</p> <p>Note: After you toggle off other wallet extensions, refresh the JustLend DAO page and connect to it again. </p>"},{"location":"getting_started/faqs/wallet_connection_questions/#what-can-i-do-if-justlend-dao-no-longer-responds-after-i-switch-from-wallet-a-to-wallet-b-and-try-to-make-a-transaction","title":"What can I do if JustLend DAO no longer responds after I switch from Wallet A to Wallet B and try to make a transaction?","text":"<p>You can refresh the page and try to initiate the transaction again.</p> <p>If the platform still fails to respond, toggle off Wallet A, refresh the page, and then try to make the transaction again.</p>"},{"location":"governance/community_forum/","title":"JustLend Forum","text":""},{"location":"governance/jips/","title":"JustLend Improvement Proposals","text":"<p>The JustLend DAO introduces a structured approach to decentralizing the JustLend protocol and empowering community autonomy. JustLend DAO fosters consensus among all participants in the JustLend ecosystem through governance mechanisms and economic incentives. The protocol's functions and the JST token serve as core security elements of the JustLend protocol.</p> <p>Governance mechanisms in decentralized protocols are driven by participation, incentives, self-regulation, and policy management within the community, adapting to and coexisting with the market dynamics. JustLend DAO manages on-chain operations through proposals, enabling the protocol to achieve self-operation, self-governance, and self-evolution based on predefined rules through intelligent management and token economic incentives, without third-party intervention, ultimately maximizing efficiency and value transfer.</p> <p>An essential incentive method in the governance process of JustLend DAO, JST tokenizes various organizational elements, integrating monetary capital, human capital, and other resources to enhance organizational efficiency significantly. The goal of the JST economy is to facilitate the virtuous and long-term development of the entire JustLend DAO ecosystem, allowing stakeholders and investors to benefit from a more secure agreement. JST holders are accountable for the protocol and ecosystem, contributing through practical actions such as technical integration (e.g., DeFi front-end integration) or financial investments (e.g., liquidity provision), significantly enhancing protocol execution, security, and functionality.</p> <p>The JustLend DAO was established to facilitate the development and long-term governance of the JustLend DAO protocol. The goal is to create a future-proof governance framework leveraging system incentives and multi-level governance to maintain an effective balance that drives long-term growth and continuous protocol optimization.</p>"},{"location":"governance/jips/#governance-process","title":"Governance Process","text":"<p>JustLend Protocol's governance relies on participants locking JST tokens to acquire voting power for JustLend Improvement Proposals (JIPs).  The governance is first discussed in the JustLend DAO forum. If there is no contentious, then it is conducted through voting. Any users who hold more than 200 million JST can initiate a proposal on the platform, and other users can participate in the vote. If and only if the number of votes in favor of the proposal exceeds the number of negative votes and meanwhile exceeds 600 million, the proposal can be passed and implemented two days later.</p> <p>JST tokens enable holders to collectively act as managers of the protocol, enabling them to vote and propose. The process of submitting a proposal and voting is as shown below (before entering the lock phase, you can cancel the created proposal at any time by proposal)</p> <p></p> <ol> <li>JST holders call governance contracts to create proposals. Once a proposal is successfully created, it will undergo a 2-day review period. Voting rights are then recorded, and the voting process begins after the review period ends.</li> <li>JST holders receive votes and can choose to either support or oppose a proposal based on its content. Each JST holder is entitled to one vote. The voting period lasts for 3 days.</li> <li>Once the voting period ends, the governance contract will determine whether the proposal has been approved based on the number of votes. If the proposal does not pass, it will be terminated. If the proposal is approved, it will trigger the time lock executor.</li> <li>If the proposal is passed, the proposal will enter a lock-up period of 48 hours. After the lock-up period ends, the proposal will be in a pending state, and the proposal will take effect immediately after the execution.</li> </ol> <p>Taken together, in general, a full proposal will take at least a week.</p>"},{"location":"governance/tokenomics/","title":"Tokenomics","text":"<p>The term tokenomics encompasses a wide range of concepts that defines the science and behavior of blockchain economies. In simple terms, tokenomics are the financial foundation of blockchains. Each protocol has its unique economic model, and for the protocol's healthy and enduring development, the economic model should include design, distribution, and management of tokens, as well as the incentives and mechanisms that drive their value and utilization.</p> <p>The JustLend tokenomics  is designed to promote a healthy, long term self-sustaining economy with participant incentives aligned to the security and decentralization of the network. The main participants in this economy are suppliers, borrowers and clients who stakes TRX or USDT. The protocol revenue from users will be used to optimize income distribution and cater to the protocol's present and future needs.</p>"},{"location":"governance/tokenomics/#the-justlend-dao-economy","title":"The JustLend DAO Economy","text":"<p>JustLend DAO is a decentralized governance protocol, where users can participate in governance using the platform token JUST (Symbol: JST) to make decisions about the development of JustLend DAO.  The platform has integrated multiple independent DeFi protocols and plans to incorporate more to form the JustLend economy. There are four integrated protocols characterize the JustLend economy:</p> <ul> <li>SBM (Supply and Borrow Market):  A supply and borrow market protocol launched in December 2020.</li> <li>sTRX (Staked TRX):  A high-efficiency and yield TRON network staking pool launched in April 2023.</li> <li>JustStable Coin (USDJ): A stablecoin minting protocol launched in April 2020, which was the first application protocol of JST.</li> <li>Energy Rental: A platform for flexible and low-cost energy rental on the TRON network launched in April 2023, significantly reducing transaction costs.</li> </ul>"},{"location":"governance/tokenomics/#sbm-supply-and-borrow-market","title":"SBM - Supply and Borrow Market","text":"<p>SBM is a TRON-powered money market protocol designed to create fund pools with interest rates determined by an algorithm based on the supply and demand of TRON assets. The protocol involves two key roles: suppliers and borrowers, who directly engage with the protocol to earn or pay a floating interest rate. SBM serves as the core protocol of JustLend DAO.</p> <p>Within SBM, each money market corresponds to a unique TRON asset, such as TRX, TRC20 stablecoins (e.g., USDT), or other TRC20-based tokens. The protocol features an open and transparent ledger that records all transactions and historical interest rates.</p>"},{"location":"governance/tokenomics/#staked-trx","title":"Staked TRX","text":"<p>TRX holders have the opportunity to receive the receipt token sTRX by staking TRX, allowing them to earn double yields from voting and Energy rental. In contrast to participating in Stake 2.0, sTRX offers higher returns and can be utilized in DeFi applications, including decentralized exchanges (DEXs). This token eliminates liquidity constraints associated with the unstaking period in Stake 2.0.</p>"},{"location":"governance/tokenomics/#juststable-coin-usdj","title":"JustStable Coin - USDJ","text":"<p>USDJ is a stablecoin native to the TRON network, generated through decentralized smart contracts. Users can stake TRX as collateral to create USDJ, which then circulates freely like any other cryptocurrency. USDJ is staked to the US dollar using Collateralized Debt Positions (CDPs) and features autonomous feedback mechanisms to maintain its stability.</p>"},{"location":"governance/tokenomics/#energy-rental","title":"Energy Rental","text":"<p>An innovative protocol for flexible and cost-effective energy rental on the TRON network. The energy obtained through this protocol is significantly cheaper than that obtained through burning or staking TRX, enabling the cost of most transactions to be reduced to below 1 TRX.</p>"},{"location":"governance/tokenomics/#supply-mining","title":"Supply Mining","text":"<p>The latest round of JustLend DAO deposit supply mining started on February 16, 2024, and has already completed 36 rounds. The mining activity is community-driven and funded by the subDAO of JustLend DAO - GrantsDAO, which empowers community developers, contributors, participants, and any projects that contribute to the ecosystem, while providing positive incentives to ecosystem participants.</p>"},{"location":"governance/tokenomics/#buyback-burning","title":"Buyback &amp; Burning","text":"<p>The JST ecosystem burn plan implemented by GrantsDAO aims to use protocol base income and donations from partner projects to provide liquidity to SunSwap V2 for JST trading pairs and burn the resulting liquidity tokens (e.g., SUNSWAP-JST-TRX V2 Token), thus accumulating JST liquidity in DEX. Compared to directly burning tokens, the ecosystem burn plan's approach reduces supply while maintaining liquidity in DEX, stabilizing the price of JST.</p>"},{"location":"governance/tokenomics/#revenue-distribution-from-protocol-reserves","title":"Revenue Distribution from Protocol Reserves","text":"<p>The protocol reserves mainly consist of accumulated borrow fees. The revenue allocation model divides income from these reserves into four key segments:</p> <ul> <li>Risk Fund(40%): This fund is set up to mitigate potential deficiencies in the protocol, especially during instances of ineffective or delayed liquidations. The allocation to the risk fund remains constant to uphold a robust financial buffer;</li> <li>DAO Reserve(30%): The reserve strengthens the protocol's resilience and serves as a robust safety net for its continuous operations;</li> <li>Incentives(20%): This part is emmitted as incentives for suppliers and borrowers;</li> <li>Supply Mining Rewards(10%): This rewards utilized a portion of the reserve revenue to incentivize  developers, contributors, participants, and any projects that contribute to the ecosystem.</li> </ul> <p></p>"},{"location":"resources/risk_warning/","title":"Risk Warning","text":""},{"location":"resources/risk_warning/#liquidation-tool-disclaimer","title":"Liquidation Tool Disclaimer","text":"<p>Important Disclaimer: Version 1.0 (Last update: 19 February 2025)</p> <p>Please read this disclaimer carefully before using the JustLend SBM Liquidation Tool. Using this tool indicates that you fully understand and agree to the following terms\uff1a</p> <p>On-Chain Risk Warning: The liquidation tool operates based on the JustLend SBM smart contract and fully adheres to its specifications. Please note that the liquidation tool functions strictly according to its designed logic and does not assume responsibility for the logic itself. We advise you to use the tool only after fully understanding the JustLend contract.</p> <p>Accuracy of Information: The information and data provided in this market liquidation process are sourced from public channels. We will make every effort to ensure their accuracy and timeliness; however, no explicit or implied guarantee is made regarding the accuracy, completeness, or suitability of the information. Market fluctuations and blockchain network congestion may lead to data inconsistencies. The JustLend SBM Liquidation Tool may exhibit discrepancies due to fluctuations and congestion, and final returns may vary depending on market conditions at the time of liquidation. As such, the liquidation returns displayed on the platform are estimates and do not guarantee actual profits. Participants are encouraged to independently verify the authenticity and reliability of the information used such as price, depth, market volatility risk, etc. and make decisions based on their own risk tolerance.</p> <p>Third-Party Agreements and External Dependencies: The JustLend SBM Liquidation Tool may interact with other DeFi protocols. If you utilize external protocol calls for liquidation, please assess the reliability of these protocols independently. We are unable to ensure the security, operational status, or any changes made to these external protocols. By using this feature, you acknowledge and accept the potential risks associated with such interactions.</p> <p>Governing Law: This disclaimer is governed by the applicable laws and regulations. In the event of any disputes, the matter should be submitted to the appropriate legal authorities for resolution.</p> <p>Limitation of Liability: To the fullest extent permitted by applicable law, we shall not be liable for any direct, indirect, incidental, or consequential loss, damage, or liability arising from the use or inability to use this liquidation feature. You should assess the suitability of the JustLend SBM Liquidation Tool for your needs and use it only after fully understanding the risks involved. Participants use the market liquidation services at their own risk.</p> <p>The platform retains the final right to interpret this disclaimer, which may be updated at any time. Please check the latest version regularly.</p>"},{"location":"resources/community/links/","title":"Links","text":""},{"location":"resources/community/links/#websites","title":"Websites","text":"<ul> <li>Main JUST Network</li> <li>Main JustLend Network</li> <li>JustLend Markets</li> <li>JUST Stablecoin (USDJ)</li> </ul>"},{"location":"resources/community/links/#telegram-groups","title":"Telegram groups","text":"<ul> <li>JUST-Defi</li> <li>JustLend DAO Official</li> </ul>"},{"location":"resources/community/links/#forum","title":"Forum","text":"<ul> <li>JustLend DAO Forum</li> </ul>"},{"location":"resources/community/links/#x-formerly-twitter","title":"X (Formerly Twitter)","text":"<ul> <li>JUST-Defi Twitter</li> </ul>"},{"location":"resources/community/links/#developers","title":"Developers","text":"<ul> <li>Github</li> <li>Bug Bounty</li> </ul>"}]}